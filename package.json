{
  "name": "goscript",
  "description": "Go to TypeScript transpiler",
  "version": "0.0.31",
  "author": {
    "name": "Aperture Robotics LLC.",
    "email": "support@aperture.us",
    "url": "http://aperture.us"
  },
  "contributors": [
    {
      "name": "Christian Stewart",
      "email": "christian@aperture.us",
      "url": "http://github.com/paralin"
    }
  ],
  "repository": {
    "url": "git+ssh://git@github.com/aperturerobotics/goscript.git"
  },
  "type": "module",
  "bin": {
    "goscript": "./cmd/goscript/main.js"
  },
  "exports": {
    ".": {
      "import": {
        "types": "./dist/compiler/index.d.ts",
        "default": "./dist/compiler/index.js"
      }
    },
    "./compiler": {
      "import": {
        "types": "./dist/compiler/index.d.ts",
        "default": "./dist/compiler/index.js"
      }
    },
    "./gs/builtin": {
      "import": {
        "types": "./dist/gs/builtin/builtin.d.ts",
        "default": "./dist/gs/builtin/builtin.js"
      }
    }
  },
  "scripts": {
    "build": "npm run build:updategover && tsc -p tsconfig.build.json",
    "build:updategover": "node -e \"const fs = require('fs'); const { execSync } = require('child_process'); const goVersion = execSync('go mod edit -json', { encoding: 'utf8' }); const goData = JSON.parse(goVersion); const version = goData.Go; const runtimePath = 'gs/runtime/runtime.ts'; const content = fs.readFileSync(runtimePath, 'utf8'); const updatedContent = content.replace(/export const GOVERSION = 'go[^']*'/, \\`export const GOVERSION = 'go\\${version}'\\`); fs.writeFileSync(runtimePath, updatedContent);\"",
    "prepublishOnly": "npm run build",
    "example": "cd ./example/simple && bash run.bash",
    "test": "npm run test:go && npm run test:js",
    "test:go": "go test -v ./...",
    "test:js": "npm run typecheck && vitest run",
    "typecheck": "tsgo --noEmit -p tsconfig.build.json",
    "format": "npm run format:go && npm run format:js && npm run format:config",
    "format:config": "prettier --write tsconfig.json package.json",
    "format:go": "gofumpt -w .",
    "format:js": "prettier --write './{src,gs,example}/**/(*.ts|*.tsx|*.html|*.css|*.scss)'",
    "release": "npm run release:version && npm run release:commit",
    "release:minor": "npm run release:version:minor && npm run release:commit",
    "release:version": "npm version patch -m \"release: v%s\" --no-git-tag-version",
    "release:version:minor": "npm version minor -m \"release: v%s\" --no-git-tag-version",
    "release:commit": "git reset && git add package.json && git commit -s -m \"release: v$npm_package_version\" && git tag v$npm_package_version",
    "release:publish": "git push && git push --tags && npm run build && npm publish",
    "lint": "npm run lint:go && npm run lint:js",
    "lint:go": "make lint",
    "lint:js": "eslint -c eslint.config.mjs ./",
    "prepare": "husky",
    "precommit": "lint-staged"
  },
  "files": [
    "!**/*.tsbuildinfo",
    "dist",
    "cmd",
    "compiler",
    "gs",
    "!compliance",
    "go.mod",
    "go.sum",
    "LICENSE",
    "README.md"
  ],
  "lint-staged": {
    "package.json": "prettier --config .prettierrc.yaml --write",
    "./{src,builtin,example}/**/(*.ts|*.tsx|*.html|*.css|*.scss)": "prettier --config .prettierrc.yaml --write"
  },
  "devDependencies": {
    "@aptre/protobuf-es-lite": "^0.4.9",
    "@eslint/js": "^9.25.1",
    "@types/node": "^22.15.18",
    "@typescript-eslint/eslint-plugin": "^8.31.0",
    "@typescript-eslint/parser": "^8.31.0",
    "@typescript/native-preview": "^7.0.0-dev.20250523.1",
    "eslint": "^9.25.1",
    "eslint-config-prettier": "^10.0.2",
    "husky": "^9.1.7",
    "lint-staged": "^16.0.0",
    "prettier": "^3.5.3",
    "tsx": "^4.0.0",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.31.0",
    "vitest": "^3.1.2"
  }
}
