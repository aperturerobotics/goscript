GoScript is an experimental Go to TypeScript transpiler that enables developers to convert high-level Go code into maintainable TypeScript. It translates Go constructs—such as structs, functions, and pointer semantics—into idiomatic TypeScript code while preserving Go's value semantics and type safety. It is designed to bridge the gap between the robust type system of Go and the flexible ecosystem of TypeScript. The GoScript runtime, located in `builtin/builtin.ts`, provides necessary helper functions and is imported in generated code using the `@goscript/builtin` package name with `import * as $ from "@goscript/builtin"`.
The generated output TypeScript style from the transpiler should not use semicolons and should always focus on code clarity and correctness.
Follow Rick Rubin's concept of being both an engineer and a reducer (not always a producer) by focusing on the shortest, most straightforward solution that is correct.
